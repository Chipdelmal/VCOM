humanToVectorTransmissionRate = .3,
humanDeathRate = 1 / (60*365)
),
func = SEIR_ode
)
#Generating a data frame
trajectory_df = data.frame(trajectory)
#Plotting with GGPLOT2
ggplot(trajectory_df, aes(x=time, y=trajectory_df, color=State))+
#geom_line(aes(y=Sh/10000, col="Sh"), size=1)+
#geom_line(aes(y=Eh/10000, col="Sh"), size=1)+
geom_line(aes(y=Ih/10000, col="Ih"), size=1)+
#geom_line(aes(y=Rh/10000, col="Sh"), size=1)+
#geom_line(aes(y=Sv/100000, col="Sv"), size=1)+
#geom_line(aes(y=Ev/100000, col="Ev"), size=1)+
geom_line(aes(y=Iv/10000, col="Iv"), size=1)+
labs(x="Time (days)", y="Fraction of Population")
library(deSolve)
library(ggplot2)
#Derivative functions for closed SEIR model
SEIR_ode = function(time,state,parameters){
#Parameters
H = parameters["popHuman"]
V = parameters["popMosquito"]
betah = parameters["vectorToHumanTransmissionRate"]
betav = parameters["humanToVectorTransmissionRate"]
mh = parameters["humanDeathRate"]
delta = 1 / parameters["lifeExpectancyMosquito"]
alphah = 1 / parameters["latentPeriodInHumans"]
alphav = 1 / parameters["latentPeriodInMosquito"]
gamma = 1 / parameters["infectiousPeriodHumans"]
#States
Sh = state["Sh"]
Eh = state["Eh"]
Ih = state["Ih"]
Rh = state["Rh"]
Sv = state["Sv"]
Ev = state["Ev"]
Iv = state["Iv"]
Nh = Sh+Eh+Ih+Rh
Nv = Sv+Ev+Iv
#Derivatives
dSh = mh*H-betah*Sh*Iv-mh*Sh
dEh = betah*Sh*Iv-alphah*Eh-mh*Eh
dIh = alphah*Eh-gamma*Ih-mh*Ih
dRh = gamma*Ih - mh*Rh
dSv = delta - betav*Sv*(Ih/H)-delta*Sv
dEv = betav*Sv*(Ih/H)-alphav*Ev-delta*Ev
dIv = alphav*Ev-delta*Iv
return(list(c(dSh,dEh,dIh,dRh,dSv,dEv,dIv)))
}
#Trajectory for closed SEIR model
trajectory = ode(
y = c(
Sh = (10000-10), Eh = 0, Ih = 10, Rh = 0,
Sv = (10000-10), Ev = 0, Iv = 10
),
times = seq(from = 0, to = 100*365, by = 1),
parms = c(
popHuman = 100000,
popMosquito = 100000,
infectiousPeriodHumans = 5,
lifeExpectancyMosquito = 8,
latentPeriodInHumans = 4,
latentPeriodInMosquito = 10,
vectorToHumanTransmissionRate = .5,
humanToVectorTransmissionRate = .3,
humanDeathRate = 1 / (60*365)
),
func = SEIR_ode
)
#Generating a data frame
trajectory_df = data.frame(trajectory)
#Plotting with GGPLOT2
ggplot(trajectory_df, aes(x=time, y=trajectory_df, color=State))+
geom_line(aes(y=Sh/10000, col="Sh"), size=1)+
geom_line(aes(y=Eh/10000, col="Sh"), size=1)+
geom_line(aes(y=Ih/10000, col="Ih"), size=1)+
geom_line(aes(y=Rh/10000, col="Sh"), size=1)+
geom_line(aes(y=Sv/100000, col="Sv"), size=1)+
geom_line(aes(y=Ev/100000, col="Ev"), size=1)+
geom_line(aes(y=Iv/10000, col="Iv"), size=1)+
labs(x="Time (days)", y="Fraction of Population")
library(deSolve)
library(ggplot2)
#Derivative functions for closed SEIR model
SEIR_ode = function(time,state,parameters){
#Parameters
H = parameters["popHuman"]
V = parameters["popMosquito"]
betah = parameters["vectorToHumanTransmissionRate"]
betav = parameters["humanToVectorTransmissionRate"]
mh = parameters["humanDeathRate"]
delta = 1 / parameters["lifeExpectancyMosquito"]
alphah = 1 / parameters["latentPeriodInHumans"]
alphav = 1 / parameters["latentPeriodInMosquito"]
gamma = 1 / parameters["infectiousPeriodHumans"]
#States
Sh = state["Sh"]
Eh = state["Eh"]
Ih = state["Ih"]
Rh = state["Rh"]
Sv = state["Sv"]
Ev = state["Ev"]
Iv = state["Iv"]
Nh = Sh+Eh+Ih+Rh
Nv = Sv+Ev+Iv
#Derivatives
dSh = mh*H-betah*Sh*Iv-mh*Sh
dEh = betah*Sh*Iv-alphah*Eh-mh*Eh
dIh = alphah*Eh-gamma*Ih-mh*Ih
dRh = gamma*Ih - mh*Rh
dSv = delta - betav*Sv*(Ih/H)-delta*Sv
dEv = betav*Sv*(Ih/H)-alphav*Ev-delta*Ev
dIv = alphav*Ev-delta*Iv
return(list(c(dSh,dEh,dIh,dRh,dSv,dEv,dIv)))
}
#Trajectory for closed SEIR model
trajectory = ode(
y = c(
Sh = (10000-10), Eh = 0, Ih = 10, Rh = 0,
Sv = (10000-10), Ev = 0, Iv = 10
),
times = seq(from = 0, to = 100*365, by = 1),
parms = c(
popHuman = 100000,
popMosquito = 100000,
infectiousPeriodHumans = 5,
lifeExpectancyMosquito = 8,
latentPeriodInHumans = 4,
latentPeriodInMosquito = 10,
vectorToHumanTransmissionRate = .5,
humanToVectorTransmissionRate = .3,
humanDeathRate = 1 / (60*365)
),
func = SEIR_ode
)
#Generating a data frame
trajectory_df = data.frame(trajectory)
#Plotting with GGPLOT2
ggplot(trajectory_df, aes(x=time, y=trajectory_df, color=State))+
geom_line(aes(y=Sh/10000, col="Sh"), size=1)+
geom_line(aes(y=Eh/10000, col="Eh"), size=1)+
geom_line(aes(y=Ih/10000, col="Ih"), size=1)+
geom_line(aes(y=Rh/10000, col="Rh"), size=1)+
geom_line(aes(y=Sv/100000, col="Sv"), size=1)+
geom_line(aes(y=Ev/100000, col="Ev"), size=1)+
geom_line(aes(y=Iv/10000, col="Iv"), size=1)+
labs(x="Time (days)", y="Fraction of Population")
library(deSolve)
library(ggplot2)
#Derivative functions for closed SEIR model
SEIR_ode = function(time,state,parameters){
#Parameters
H = parameters["popHuman"]
V = parameters["popMosquito"]
betah = parameters["vectorToHumanTransmissionRate"]
betav = parameters["humanToVectorTransmissionRate"]
mh = parameters["humanDeathRate"]
delta = 1 / parameters["lifeExpectancyMosquito"]
alphah = 1 / parameters["latentPeriodInHumans"]
alphav = 1 / parameters["latentPeriodInMosquito"]
gamma = 1 / parameters["infectiousPeriodHumans"]
#States
Sh = state["Sh"]
Eh = state["Eh"]
Ih = state["Ih"]
Rh = state["Rh"]
Sv = state["Sv"]
Ev = state["Ev"]
Iv = state["Iv"]
Nh = Sh+Eh+Ih+Rh
Nv = Sv+Ev+Iv
#Derivatives
dSh = mh*H-betah*Sh*Iv-mh*Sh
dEh = betah*Sh*Iv-alphah*Eh-mh*Eh
dIh = alphah*Eh-gamma*Ih-mh*Ih
dRh = gamma*Ih - mh*Rh
dSv = delta - betav*Sv*(Ih/H)-delta*Sv
dEv = betav*Sv*(Ih/H)-alphav*Ev-delta*Ev
dIv = alphav*Ev-delta*Iv
return(list(c(dSh,dEh,dIh,dRh,dSv,dEv,dIv)))
}
#Trajectory for closed SEIR model
trajectory = ode(
y = c(
Sh = (10000-10), Eh = 0, Ih = 10, Rh = 0,
Sv = (10000-10), Ev = 0, Iv = 10
),
times = seq(from = 0, to = 100*365, by = 1),
parms = c(
popHuman = 100000,
popMosquito = 100000,
infectiousPeriodHumans = 5,
lifeExpectancyMosquito = 8,
latentPeriodInHumans = 4,
latentPeriodInMosquito = 10,
vectorToHumanTransmissionRate = .5,
humanToVectorTransmissionRate = .3,
humanDeathRate = 1 / (60*365)
),
func = SEIR_ode
)
#Generating a data frame
trajectory_df = data.frame(trajectory)
#Plotting with GGPLOT2
ggplot(trajectory_df, aes(x=time, y=trajectory_df, color=State))+
geom_line(aes(y=Sh/(Sh+Eh+Ih+Rh), col="Sh"), size=1)+
geom_line(aes(y=Eh/10000, col="Eh"), size=1)+
geom_line(aes(y=Ih/10000, col="Ih"), size=1)+
geom_line(aes(y=Rh/10000, col="Rh"), size=1)+
geom_line(aes(y=Sv/100000, col="Sv"), size=1)+
geom_line(aes(y=Ev/100000, col="Ev"), size=1)+
geom_line(aes(y=Iv/10000, col="Iv"), size=1)+
labs(x="Time (days)", y="Fraction of Population")
library(deSolve)
library(ggplot2)
#Derivative functions for closed SEIR model
SEIR_ode = function(time,state,parameters){
#Parameters
H = parameters["popHuman"]
V = parameters["popMosquito"]
betah = parameters["vectorToHumanTransmissionRate"]
betav = parameters["humanToVectorTransmissionRate"]
mh = parameters["humanDeathRate"]
delta = 1 / parameters["lifeExpectancyMosquito"]
alphah = 1 / parameters["latentPeriodInHumans"]
alphav = 1 / parameters["latentPeriodInMosquito"]
gamma = 1 / parameters["infectiousPeriodHumans"]
#States
Sh = state["Sh"]
Eh = state["Eh"]
Ih = state["Ih"]
Rh = state["Rh"]
Sv = state["Sv"]
Ev = state["Ev"]
Iv = state["Iv"]
Nh = Sh+Eh+Ih+Rh
Nv = Sv+Ev+Iv
#Derivatives
dSh = mh*H-betah*Sh*Iv-mh*Sh
dEh = betah*Sh*Iv-alphah*Eh-mh*Eh
dIh = alphah*Eh-gamma*Ih-mh*Ih
dRh = gamma*Ih - mh*Rh
dSv = delta - betav*Sv*(Ih/H)-delta*Sv
dEv = betav*Sv*(Ih/H)-alphav*Ev-delta*Ev
dIv = alphav*Ev-delta*Iv
return(list(c(dSh,dEh,dIh,dRh,dSv,dEv,dIv)))
}
#Trajectory for closed SEIR model
trajectory = ode(
y = c(
Sh = (10000-10), Eh = 0, Ih = 10, Rh = 0,
Sv = (10000-10), Ev = 0, Iv = 10
),
times = seq(from = 0, to = 100*365, by = 1),
parms = c(
popHuman = 100000,
popMosquito = 100000,
infectiousPeriodHumans = 5,
lifeExpectancyMosquito = 8,
latentPeriodInHumans = 4,
latentPeriodInMosquito = 10,
vectorToHumanTransmissionRate = .5,
humanToVectorTransmissionRate = .3,
humanDeathRate = 1 / (60*365)
),
func = SEIR_ode
)
#Generating a data frame
trajectory_df = data.frame(trajectory)
#Plotting with GGPLOT2
ggplot(trajectory_df, aes(x=time, y=trajectory_df, color=State))+
geom_line(aes(y=Sh/(Sh+Eh+Ih+Rh), col="Sh"), size=1)+
geom_line(aes(y=Eh/(Sh+Eh+Ih+Rh), col="Eh"), size=1)+
geom_line(aes(y=Ih/(Sh+Eh+Ih+Rh), col="Ih"), size=1)+
geom_line(aes(y=Rh/(Sh+Eh+Ih+Rh), col="Rh"), size=1)+
geom_line(aes(y=Sv/(Sv+Ev+Rv), col="Sv"), size=1)+
geom_line(aes(y=Ev/(Sv+Ev+Rv), col="Ev"), size=1)+
geom_line(aes(y=Iv/(Sv+Ev+Rv), col="Iv"), size=1)+
labs(x="Time (days)", y="Fraction of Population")
library(deSolve)
library(ggplot2)
#Derivative functions for closed SEIR model
SEIR_ode = function(time,state,parameters){
#Parameters
H = parameters["popHuman"]
V = parameters["popMosquito"]
betah = parameters["vectorToHumanTransmissionRate"]
betav = parameters["humanToVectorTransmissionRate"]
mh = parameters["humanDeathRate"]
delta = 1 / parameters["lifeExpectancyMosquito"]
alphah = 1 / parameters["latentPeriodInHumans"]
alphav = 1 / parameters["latentPeriodInMosquito"]
gamma = 1 / parameters["infectiousPeriodHumans"]
#States
Sh = state["Sh"]
Eh = state["Eh"]
Ih = state["Ih"]
Rh = state["Rh"]
Sv = state["Sv"]
Ev = state["Ev"]
Iv = state["Iv"]
Nh = Sh+Eh+Ih+Rh
Nv = Sv+Ev+Iv
#Derivatives
dSh = mh*H-betah*Sh*Iv-mh*Sh
dEh = betah*Sh*Iv-alphah*Eh-mh*Eh
dIh = alphah*Eh-gamma*Ih-mh*Ih
dRh = gamma*Ih - mh*Rh
dSv = delta - betav*Sv*(Ih/H)-delta*Sv
dEv = betav*Sv*(Ih/H)-alphav*Ev-delta*Ev
dIv = alphav*Ev-delta*Iv
return(list(c(dSh,dEh,dIh,dRh,dSv,dEv,dIv)))
}
#Trajectory for closed SEIR model
trajectory = ode(
y = c(
Sh = (10000-10), Eh = 0, Ih = 10, Rh = 0,
Sv = (10000-10), Ev = 0, Iv = 10
),
times = seq(from = 0, to = 100*365, by = 1),
parms = c(
popHuman = 100000,
popMosquito = 100000,
infectiousPeriodHumans = 5,
lifeExpectancyMosquito = 8,
latentPeriodInHumans = 4,
latentPeriodInMosquito = 10,
vectorToHumanTransmissionRate = .5,
humanToVectorTransmissionRate = .3,
humanDeathRate = 1 / (60*365)
),
func = SEIR_ode
)
#Generating a data frame
trajectory_df = data.frame(trajectory)
#Plotting with GGPLOT2
ggplot(trajectory_df, aes(x=time, y=trajectory_df, color=State))+
geom_line(aes(y=Sh/(Sh+Eh+Ih+Rh), col="Sh"), size=1)+
geom_line(aes(y=Eh/(Sh+Eh+Ih+Rh), col="Eh"), size=1)+
geom_line(aes(y=Ih/(Sh+Eh+Ih+Rh), col="Ih"), size=1)+
geom_line(aes(y=Rh/(Sh+Eh+Ih+Rh), col="Rh"), size=1)+
geom_line(aes(y=Sv/(Sv+Ev+Iv), col="Sv"), size=1)+
geom_line(aes(y=Ev/(Sv+Ev+Iv), col="Ev"), size=1)+
geom_line(aes(y=Iv/(Sv+Ev+Iv), col="Iv"), size=1)+
labs(x="Time (days)", y="Fraction of Population")
library(deSolve)
library(ggplot2)
#Derivative functions for closed SEIR model
SEIR_ode = function(time,state,parameters){
#Parameters
H = parameters["popHuman"]
V = parameters["popMosquito"]
betah = parameters["vectorToHumanTransmissionRate"]
betav = parameters["humanToVectorTransmissionRate"]
mh = parameters["humanDeathRate"]
delta = 1 / parameters["lifeExpectancyMosquito"]
alphah = 1 / parameters["latentPeriodInHumans"]
alphav = 1 / parameters["latentPeriodInMosquito"]
gamma = 1 / parameters["infectiousPeriodHumans"]
#States
Sh = state["Sh"]
Eh = state["Eh"]
Ih = state["Ih"]
Rh = state["Rh"]
Sv = state["Sv"]
Ev = state["Ev"]
Iv = state["Iv"]
Nh = Sh+Eh+Ih+Rh
Nv = Sv+Ev+Iv
#Derivatives
dSh = mh*H-betah*Sh*Iv-mh*Sh
dEh = betah*Sh*Iv-alphah*Eh-mh*Eh
dIh = alphah*Eh-gamma*Ih-mh*Ih
dRh = gamma*Ih - mh*Rh
dSv = delta - betav*Sv*(Ih/H)-delta*Sv
dEv = betav*Sv*(Ih/H)-alphav*Ev-delta*Ev
dIv = alphav*Ev-delta*Iv
return(list(c(dSh,dEh,dIh,dRh,dSv,dEv,dIv)))
}
#Trajectory for closed SEIR model
trajectory = ode(
y = c(
Sh = (10000-10), Eh = 0, Ih = 10, Rh = 0,
Sv = (10000-10), Ev = 0, Iv = 10
),
times = seq(from = 0, to = 1000*365, by = 1),
parms = c(
popHuman = 100000,
popMosquito = 100000,
infectiousPeriodHumans = 5,
lifeExpectancyMosquito = 8,
latentPeriodInHumans = 4,
latentPeriodInMosquito = 10,
vectorToHumanTransmissionRate = .5,
humanToVectorTransmissionRate = .3,
humanDeathRate = 1 / (60*365)
),
func = SEIR_ode
)
#Generating a data frame
trajectory_df = data.frame(trajectory)
#Plotting with GGPLOT2
ggplot(trajectory_df, aes(x=time, y=trajectory_df, color=State))+
geom_line(aes(y=Sh/(Sh+Eh+Ih+Rh), col="Sh"), size=1)+
geom_line(aes(y=Eh/(Sh+Eh+Ih+Rh), col="Eh"), size=1)+
geom_line(aes(y=Ih/(Sh+Eh+Ih+Rh), col="Ih"), size=1)+
geom_line(aes(y=Rh/(Sh+Eh+Ih+Rh), col="Rh"), size=1)+
geom_line(aes(y=Sv/(Sv+Ev+Iv), col="Sv"), size=1)+
geom_line(aes(y=Ev/(Sv+Ev+Iv), col="Ev"), size=1)+
geom_line(aes(y=Iv/(Sv+Ev+Iv), col="Iv"), size=1)+
labs(x="Time (days)", y="Fraction of Population")
library(deSolve)
library(ggplot2)
#Derivative functions for closed SEIR model
SEIR_ode = function(time,state,parameters){
#Parameters
H = parameters["popHuman"]
V = parameters["popMosquito"]
a = parameters["bitingRate"]
bh = parameters["vectorToHumanProb"]
bv = parameters["humanToVectorProb"]
r = 1 / parameters["infectiousPeriodHumans"]
gamma = 1 / parameters["latentPeriodInHost"]
muv = 1 / parameters["lifeExpectancyMosquito"]
#States
Sh = state["Sh"]
Ih = state["Ih"]
Sv = state["Sv"]
Ev = state["Ev"]
Iv = state["Iv"]
Nh = Sh+Ih
Nv = Sv+Ev+Iv
#Derivatives
dSh = -(V/H)*a*(Iv/V)*bh*Sh+r*Ih
dIh = (V/H)*a*(Iv/V)*bh*Sh-r*Ih
dSv = muv*V-a*(Ih/H)*bv*Sv-muv*Sv
dEv = a*(Ih/H)*bv*Sv-gamma*Ev-muv*Ev
dIv = gamma*Ev-muv*Iv
return(list(c(dSh,dIh,dSv,dEv,dIv)))
}
#Trajectory for closed SEIR model
trajectory = ode(
y = c(
Sh = (1000-10), Ih = 10,
Sv = (10000-10), Ev = 0, Iv = 10
),
times = seq(from = 0, to = 2*365, by = 1),
parms = c(
popHuman = 1000,
popMosquito = 10000,
infectiousPeriodHumans = 50,
lifeExpectancyMosquito = 10,
latentPeriodInHost = 12,
bitingRate = .33,
vectorToHumanProb = .2,
humanToVectorProb = .05
),
func = SEIR_ode
)
#Generating a data frame
trajectory_df = data.frame(trajectory)
#Plotting with GGPLOT2
ggplot(trajectory_df, aes(x=time, y=trajectory_df, color=State))+
geom_line(aes(y=Sh/1000, col="Sh"), size=1.2)+
geom_line(aes(y=Ih/1000, col="Ih"), size=1.2)+
geom_line(aes(y=Sv/10000, col="Sv"), size=1.2)+
geom_line(aes(y=Ev/10000, col="Ev"), size=1.2)+
geom_line(aes(y=Iv/10000, col="Iv"), size=1.2)+
labs(x="Time (days)", y="Fraction of Population")
install.packages("rms")
install.packages("hydroPSO")
library(pso)
library(pso-package)
test.problem("rosenbrock",1)
install.packages("pso")
library(pso)
test.problem("rosenbrock",1)
install.packages("nimble", repos = "http://r-nimble.org", type = "source")
install.packages("nimble", repos = "http://r-nimble.org", type = "source")
install.packages(c("rjson", "ROCR", "enrichvs", "plyr"))
cd optunity/wrappers
R CMD build R/
R CMD INSTALL optunity_<version number>.tar.gz
cd optunity/wrappers
cd ~/Desktop
cd Desktop
cd optunity/wrappers
cd optunity/wrappers
R CMD build R/
R CMD INSTALL optunity_<version number>.tar.gz
cd optunity/wrappers
library(optunity)
EuropeanOption <- function (s, k, r, t, vol, CallOption) {
d1 <- (log(s/k)+(r+0.5*vol^2)*t)/(vol*sqrt(t))
d2 <- d1-vol*sqrt(t)
if (CallOption){
return (s*pnorm(d1)-k*exp(-r*t)*pnorm(d2))
} else {
return (k*exp(-r*t)*pnorm(-d2)-s*pnorm(-d1))
}
}
res <- gui(EuropeanOption, argOption=list(CallOption=c("TRUE","FALSE")))
install.packages("fgui")
res <- gui(EuropeanOption, argOption=list(CallOption=c("TRUE","FALSE")))
library(gui)
library(fgui)
shiny::runApp('Documents/School/Research/ODE_MalariaVectors/GUI/InitialTest')
shiny::runApp('Documents/School/Research/ODE_MalariaVectors/GUI/InitialTest')
shiny::runApp('Documents/School/Research/ODE_MalariaVectors/GUI/InitialTest')
shiny::runApp('Documents/School/Research/ODE_MalariaVectors/GUI/InitialTest')
